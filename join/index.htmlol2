<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join PersonaCore</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            max-width: 600px;
            width: 100%;
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        .logo {
            text-align: center;
            margin-bottom: 30px;
        }
        .logo a {
            color: #667eea;
            text-decoration: none;
            font-size: 1.5em;
            font-weight: 800;
        }
        .loading {
            text-align: center;
            padding: 60px 20px;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        h1 {
            color: #1a1a1a;
            margin-bottom: 10px;
            font-size: 2em;
            text-align: center;
        }
        .subtitle {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
        }
        .creator-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        .creator-card h2 {
            font-size: 1.8em;
            margin-bottom: 10px;
        }
        .expertise {
            font-size: 0.9em;
            opacity: 0.9;
            margin-bottom: 15px;
            font-weight: 600;
        }
        .bio {
            line-height: 1.6;
            opacity: 0.95;
        }
        .pricing {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 30px;
        }
        .price {
            font-size: 3em;
            font-weight: 800;
            color: #667eea;
        }
        .price-period {
            font-size: 0.3em;
            color: #666;
        }
        .price-desc {
            color: #666;
            margin-top: 10px;
        }
        .features {
            list-style: none;
            margin-bottom: 30px;
        }
        .features li {
            padding: 12px 0;
            color: #333;
            border-bottom: 1px solid #e0e0e0;
        }
        .features li:before {
            content: "✓";
            color: #4caf50;
            font-weight: bold;
            margin-right: 10px;
        }
        
        /* Username Form Styles */
        .username-form {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 20px;
        }
        .username-form h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 600;
            font-size: 0.95em;
        }
        .form-group input {
            width: 100%;
            padding: 14px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1em;
            transition: all 0.3s;
        }
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        .form-group input.error {
            border-color: #f44336;
        }
        .form-group input.success {
            border-color: #4caf50;
        }
        .validation-message {
            margin-top: 8px;
            font-size: 0.9em;
            padding: 8px 12px;
            border-radius: 6px;
            display: none;
        }
        .validation-message.error {
            background: #ffebee;
            color: #c62828;
            display: block;
        }
        .validation-message.success {
            background: #e8f5e9;
            color: #2e7d32;
            display: block;
        }
        .validation-message.checking {
            background: #e3f2fd;
            color: #1565c0;
            display: block;
        }
        .username-rules {
            font-size: 0.85em;
            color: #666;
            margin-top: 8px;
            line-height: 1.6;
        }
        
        .btn {
            width: 100%;
            padding: 18px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.2em;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s;
        }
        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            display: none;
        }
        .not-found {
            text-align: center;
            padding: 40px 20px;
        }
        .not-found h1 {
            color: #f44336;
            margin-bottom: 20px;
        }
        .not-found p {
            color: #666;
            margin-bottom: 30px;
        }
        @media (max-width: 600px) {
            .container { padding: 25px; }
            h1 { font-size: 1.6em; }
            .price { font-size: 2.5em; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <a href="/">← PersonaCore</a>
        </div>
        
        <div id="loadingState" class="loading">
            <div class="spinner"></div>
            <p>Loading creator...</p>
        </div>
        
        <div id="contentState" style="display: none;">
            <h1 id="pageTitle"></h1>
            <p class="subtitle">Get personalized advice 24/7</p>
            
            <div class="creator-card">
                <h2 id="creatorName"></h2>
                <div class="expertise" id="creatorExpertise"></div>
                <div class="bio" id="creatorBio"></div>
            </div>
            
            <div class="pricing">
                <div class="price">£5<span class="price-period">/month</span></div>
                <div class="price-desc">Unlimited chat access</div>
            </div>
            
            <ul class="features">
                <li id="feature1">Chat 24/7 with AI twin</li>
                <li>Get personalized advice and insights</li>
                <li>Direct responses in authentic voice</li>
                <li>Cancel anytime, no commitments</li>
            </ul>
            
            <!-- Username Form -->
            <form id="usernameForm" class="username-form">
                <h3>Choose Your Username</h3>
                <div class="form-group">
                    <label for="username">Username</label>
                    <input 
                        type="text" 
                        id="username" 
                        name="username" 
                        placeholder="e.g. johndoe123"
                        autocomplete="off"
                        required
                        pattern="[a-zA-Z0-9_-]+"
                        minlength="3"
                        maxlength="30"
                    />
                    <div class="username-rules">
                        3-30 characters • Letters, numbers, hyphens, underscores only
                    </div>
                    <div id="usernameValidation" class="validation-message"></div>
                </div>
                
                <button type="submit" id="subscribeBtn" class="btn" disabled>
                    Continue to Payment
                </button>
            </form>
            
            <div id="error" class="error"></div>
        </div>
        
        <div id="notFoundState" class="not-found" style="display: none;">
            <h1>Creator Not Found</h1>
            <p>Sorry, we couldn't find that creator. They may not exist or aren't active yet.</p>
            <a href="/" class="btn" style="display: inline-block; text-decoration: none; width: auto; padding: 12px 30px;">
                Back to Homepage
            </a>
        </div>
    </div>
    
    <script type="module">
        // Get creator slug from URL
        const pathParts = window.location.pathname.split('/').filter(p => p);
        const creatorSlug = pathParts[1]; // /join/creator-slug -> creator-slug
        
        // Supabase config
        const SUPABASE_URL = 'https://hmcartafonsppirzmtoq.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhtY2FydGFmb25zcHBpcnptdG9xIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA3NTY3NDgsImV4cCI6MjA3NjMzMjc0OH0.EaMPCzwnnCN0R-S_AzNrFVAAn2AYU030Cx_5vS9vYpg';
        
        let creatorData = null;
        let usernameAvailable = false;
        let checkTimeout = null;
        
        async function loadCreator() {
            if (!creatorSlug) {
                showNotFound();
                return;
            }
            
            try {
                const response = await fetch(`${SUPABASE_URL}/rest/v1/creators?slug=eq.${creatorSlug}&status=eq.active&select=id,name,slug,bio,expertise,subscription_price_id`, {
                    headers: {
                        'apikey': SUPABASE_ANON_KEY,
                        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch creator');
                }
                
                const data = await response.json();
                
                if (!data || data.length === 0) {
                    showNotFound();
                    return;
                }
                
                creatorData = data[0];
                
                if (!creatorData.subscription_price_id) {
                    showError('This creator hasn\'t set up subscriptions yet.');
                    return;
                }
                
                displayCreator(creatorData);
                
            } catch (error) {
                console.error('Error loading creator:', error);
                showError('Failed to load creator information. Please try again.');
            }
        }
        
        function displayCreator(creator) {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('contentState').style.display = 'block';
            
            document.getElementById('pageTitle').textContent = `Chat with ${creator.name}'s AI Twin`;
            document.getElementById('creatorName').textContent = creator.name;
            
            const expertise = Array.isArray(creator.expertise) 
                ? creator.expertise.join(', ') 
                : creator.expertise || 'Expert';
            document.getElementById('creatorExpertise').textContent = expertise;
            
            document.getElementById('creatorBio').textContent = creator.bio || 'No bio available.';
            document.getElementById('feature1').textContent = `Chat 24/7 with ${creator.name}'s AI twin`;
        }
        
        function showNotFound() {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('notFoundState').style.display = 'block';
        }
        
        function showError(message) {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('contentState').style.display = 'block';
            document.getElementById('subscribeBtn').disabled = true;
            const errorDiv = document.getElementById('error');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }
        
        // Username validation
        const usernameInput = document.getElementById('username');
        const validationMessage = document.getElementById('usernameValidation');
        const subscribeBtn = document.getElementById('subscribeBtn');
        
        function validateUsernameFormat(username) {
            if (username.length < 3) {
                return { valid: false, message: 'Username must be at least 3 characters' };
            }
            if (username.length > 30) {
                return { valid: false, message: 'Username must be 30 characters or less' };
            }
            if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
                return { valid: false, message: 'Only letters, numbers, hyphens and underscores allowed' };
            }
            return { valid: true };
        }
        
        async function checkUsernameAvailability(username) {
            try {
                const response = await fetch(`${SUPABASE_URL}/rest/v1/fans?username=eq.${username}&select=username`, {
                    headers: {
                        'apikey': SUPABASE_ANON_KEY,
                        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to check username');
                }
                
                const data = await response.json();
                return data.length === 0; // Available if no results
                
            } catch (error) {
                console.error('Username check error:', error);
                return false;
            }
        }
        
        usernameInput.addEventListener('input', (e) => {
            const username = e.target.value.trim();
            
            // Clear previous timeout
            if (checkTimeout) {
                clearTimeout(checkTimeout);
            }
            
            // Reset state
            usernameInput.classList.remove('error', 'success');
            validationMessage.className = 'validation-message';
            usernameAvailable = false;
            subscribeBtn.disabled = true;
            
            if (!username) {
                return;
            }
            
            // Format validation - but only show errors after debounce for short usernames
            const formatCheck = validateUsernameFormat(username);
            if (!formatCheck.valid) {
                // Only show error immediately for invalid characters, not for length
                if (username.length >= 3 || !/^[a-zA-Z0-9_-]+$/.test(username)) {
                    usernameInput.classList.add('error');
                    validationMessage.className = 'validation-message error';
                    validationMessage.textContent = formatCheck.message;
                }
                return;
            }
            
            // Show checking message
            validationMessage.className = 'validation-message checking';
            validationMessage.textContent = 'Checking availability...';
            
            // Debounce the availability check
            checkTimeout = setTimeout(async () => {
                const available = await checkUsernameAvailability(username);
                
                if (available) {
                    usernameInput.classList.add('success');
                    validationMessage.className = 'validation-message success';
                    validationMessage.textContent = '✓ Username available!';
                    usernameAvailable = true;
                    subscribeBtn.disabled = false;
                } else {
                    usernameInput.classList.add('error');
                    validationMessage.className = 'validation-message error';
                    validationMessage.textContent = 'Username already taken. Please choose another.';
                    usernameAvailable = false;
                    subscribeBtn.disabled = true;
                }
            }, 500); // Wait 500ms after user stops typing
        });
        
        // Form submission
        document.getElementById('usernameForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!creatorData || !usernameAvailable) return;
            
            const username = usernameInput.value.trim();
            const btn = subscribeBtn;
            const errorDiv = document.getElementById('error');
            
            btn.disabled = true;
            btn.textContent = 'Processing...';
            errorDiv.style.display = 'none';
            
            try {
                // Call your Cloudflare Function with username
                const response = await fetch('/create-checkout-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        price_id: creatorData.subscription_price_id,
                        creator_slug: creatorData.slug,
                        username: username  // NEW: Pass username
                    })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to create checkout session');
                }
                
                const data = await response.json();
                
                if (data.url) {
                    // Redirect to Stripe checkout
                    window.location.href = data.url;
                } else {
                    throw new Error('No checkout URL received');
                }
                
            } catch (error) {
                console.error('Subscription error:', error);
                errorDiv.textContent = 'Error: ' + error.message;
                errorDiv.style.display = 'block';
                btn.disabled = false;
                btn.textContent = 'Continue to Payment';
            }
        });
        
        // Load creator on page load
        loadCreator();
    </script>
</body>
</html>
